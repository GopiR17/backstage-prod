directive @relation(
  name: String
  nodeType: String
  kind: String
) on FIELD_DEFINITION

scalar JSON
scalar JSONObject

enum Lifecycle {
  EXPERIMENTAL
  PRODUCTION
  DEPRECATED
}

union Ownable = API | Component | Domain | Resource | System | Template
union Dependency = Component | Resource
union Owner = User | Group

interface Entity
  @implements(interface: "Node")
  @discriminates(with: "kind", opaqueType: "OpaqueEntity") {
  name: String! @field(at: "metadata.name")
  kind: String! @field(at: "kind")
  namespace: String! @field(at: "metadata.namespace", default: "default")
  title: String! @field(at: "metadata.title", default: "")
  description: String! @field(at: "metadata.description", default: "")
  tags: [String!] @field(at: "metadata.tags")
  links: [EntityLink!] @field(at: "metadata.links")
}

type EntityLink {
  url: String!
  title: String
  icon: String
}

interface Location
  @implements(interface: "Entity")
  @discriminates(with: "spec.type", opaqueType: "OpaqueLocation")
  @discriminationAlias(value: "url", type: "URLLocation")
  @discriminationAlias(value: "file", type: "FileLocation") {
  type: String @field(at: "spec.type")
  target: String @field(at: "spec.target")
  targets: [String!] @field(at: "spec.targets")
}

interface API
  @implements(interface: "Entity")
  @discriminates(with: "spec.type", opaqueType: "OpaqueAPI")
  @discriminationAlias(value: "openapi", type: "OpenAPI")
  @discriminationAlias(value: "asyncapi", type: "AsyncAPI")
  @discriminationAlias(value: "graphql", type: "GraphQL")
  @discriminationAlias(value: "grpc", type: "GRPC") {
  lifecycle: Lifecycle! @field(at: "spec.lifecycle")
  owner: Owner! @relation(name: "ownedBy")
  definition: String! @field(at: "spec.definition")
  system: System @relation(name: "partOf")
  consumers: Connection @relation(name: "apiConsumedBy", nodeType: "Component")
  providers: Connection @relation(name: "apiProvidedBy", nodeType: "Component")
}

interface Component
  @implements(interface: "Entity")
  @discriminates(with: "spec.type", opaqueType: "OpaqueComponent")
  @discriminationAlias(value: "service", type: "Service")
  @discriminationAlias(value: "website", type: "Website")
  @discriminationAlias(value: "library", type: "Library") {
  lifecycle: Lifecycle! @field(at: "spec.lifecycle")
  owner: Owner! @relation(name: "ownedBy")
  system: System @relation(name: "partOf", kind: "system")
  component: Component @relation(name: "partOf", kind: "component")
  subComponents: Connection @relation(name: "hasPart", nodeType: "Component")
  providesApi: Connection @relation(name: "providesApi", nodeType: "API")
  consumesApi: Connection @relation(name: "consumesApi", nodeType: "API")
  dependencies: Connection @relation(name: "dependsOn", nodeType: "Dependency")
}

type Domain @implements(interface: "Entity") {
  owner: Owner! @relation(name: "ownedBy")
  systems: Connection @relation(name: "hasPart", nodeType: "System")
}

interface Resource
  @implements(interface: "Entity")
  @discriminates(with: "spec.type", opaqueType: "OpaqueResource")
  @discriminationAlias(value: "database", type: "Database") {
  owner: Owner! @relation(name: "ownedBy")
  dependencies: Connection @relation(name: "dependsOn", nodeType: "Dependency")
  dependents: Connection @relation(name: "dependencyOf", nodeType: "Dependency")
  system: System @relation(name: "partOf")
}

type System @implements(interface: "Entity") {
  owner: Owner! @relation(name: "ownedBy")
  domain: Domain @relation(name: "partOf")
  components: Connection
    @relation(name: "hasPart", nodeType: "Component", kind: "component")
  resources: Connection
    @relation(name: "hasPart", nodeType: "Resource", kind: "resource")
}

type Step {
  id: String
  name: String
  action: String!
  input: JSONObject
  if: JSON
}

interface Template
  @implements(interface: "Entity")
  @discriminates(with: "spec.type", opaqueType: "OpaqueTemplate") {
  parameters: JSONObject @field(at: "spec.parameters")
  steps: [Step!]! @field(at: "spec.steps")
  output: JSONObject @field(at: "spec.output")
  owner: Owner @relation(name: "ownedBy")
}

interface Group
  @implements(interface: "Entity")
  @discriminates(with: "spec.type", opaqueType: "OpaqueGroup")
  @discriminationAlias(value: "team", type: "Team")
  @discriminationAlias(value: "sub-department", type: "SubDepartment")
  @discriminationAlias(value: "department", type: "Department")
  @discriminationAlias(value: "organization", type: "Organization") {
  displayName: String @field(at: "spec.profile.displayName")
  email: String @field(at: "spec.profile.email")
  picture: String @field(at: "spec.profile.picture")
  parent: Group @relation(name: "childOf")
  children: Connection @relation(name: "parentOf", nodeType: "Group")
  members: Connection @relation(name: "hasMember", nodeType: "User")
  ownerOf: Connection @relation(name: "ownerOf", nodeType: "Ownable")
}

type User @implements(interface: "Entity") {
  displayName: String @field(at: "spec.profile.displayName")
  email: String @field(at: "spec.profile.email")
  picture: String @field(at: "spec.profile.picture")
  memberOf: Connection @relation(name: "memberOf", nodeType: "Group")
  ownerOf: Connection @relation(name: "ownerOf", nodeType: "Ownable")
}

extend type Query {
  entity(kind: String!, name: String!, namespace: String): Entity
}
