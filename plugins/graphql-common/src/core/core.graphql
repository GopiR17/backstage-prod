directive @field(
  at: FieldAtArgument!
  default: FieldDefaultArgument
) on FIELD_DEFINITION
directive @relation(
  name: String
  nodeType: String
  kind: String
) on FIELD_DEFINITION
directive @extend(
  interface: String
  generatedTypeName: String
  when: ExtendWhenArgument
  is: ExtendIsArgument
) on INTERFACE

scalar FieldAtArgument
scalar FieldDefaultArgument
scalar ExtendWhenArgument
scalar ExtendIsArgument

interface Node {
  id: ID!
}

interface IEntity @extend(interface: "Node") {
  name: String! @field(at: "metadata.name")
  kind: String! @field(at: "kind")
  namespace: String! @field(at: "metadata.namespace", default: "default")
  title: String! @field(at: "metadata.title", default: "")
  description: String! @field(at: "metadata.description", default: "")
  tags: [String] @field(at: "metadata.tags")
  links: [EntityLink] @field(at: "metadata.links")
}

type EntityLink {
  url: String!
  title: String
  icon: String
}

interface Connection @extend(generatedTypeName: "NodeConnection") {
  pageInfo: PageInfo!
  edges: [Edge!]!
  count: Int
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

interface Edge @extend(generatedTypeName: "NodeEdge") {
  cursor: String!
  node: Node!
}

type Query {
  node(id: ID!): Node
  entity(kind: String!, name: String!, namespace: String): IEntity
}
