name: $(Build.BuildId)

trigger:
  branches:
    include:
    - main

pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: Developer-Automation
- name: k8s-service-connection
  value: 'Kubernetes-Hellman'
- name: kubernetes-namespace
  value: 'backstage'

stages:
- stage: CI
  displayName: 'Continuous Integration'  
  jobs:
  - job: BuildBackend
    steps:
      - task: DockerCompose@0
        displayName: 'Build image'
        inputs:
          containerregistrytype: 'Container Registry'
          dockerComposeFile: './dfds-deploy/docker-compose.base.yaml'
          additionalDockerComposeFiles: './dfds-deploy/docker-compose.production.yaml'
          action: 'Run a Docker Compose command'
          dockerComposeCommand: 'build'
          arguments: 'backstage-backend' 
          # arguments: '--build-arg PAT=$(System.AccessToken)'

      - task: ECRPushImage@1
        displayName: 'Push backend image to Shared ECR'
        inputs:
          awsCredentials: 'Shared-Prod ECR-Push'
          regionName: 'eu-central-1'
          imageSource: 'imagename'
          sourceImageName: 'backstage-backend'
          repositoryName: 'selfservice/backstage-backend'
          pushTag: '$(Build.BuildId)'

  - job: BuildFrontend
    steps:
      - task: DockerCompose@0
        displayName: 'Build image'
        inputs:
          containerregistrytype: 'Container Registry'
          dockerComposeFile: './dfds-deploy/docker-compose.base.yaml'
          additionalDockerComposeFiles: './dfds-deploy/docker-compose.production.yaml'          
          action: 'Run a Docker Compose command'
          dockerComposeCommand: 'build'
          arguments: 'backstage-frontend' 
          # arguments: '--build-arg PAT=$(System.AccessToken)' 

      - task: ECRPushImage@1
        displayName: 'Push frontend image to Shared ECR'
        inputs:
          awsCredentials: 'Shared-Prod ECR-Push'
          regionName: 'eu-central-1'
          imageSource: 'imagename'
          sourceImageName: 'backstage-frontend'
          repositoryName: 'selfservice/backstage'
          pushTag: '$(Build.BuildId)'
  
  - job: PublishArtifacts
    dependsOn: 
    - BuildBackend
    - BuildFrontend 
    steps:
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/dfds-deploy/k8s'
          artifact: 'manifests'
          publishLocation: 'pipeline'   

- stage: CD
  displayName: 'Continuous Deployment'
  dependsOn: CI
  condition: and(succeeded('CI'), eq(variables['Build.SourceBranch'], 'refs/heads/main')) 

  jobs:  
  - deployment: K8s
    displayName: 'Deploy to Kubernetes'
    environment: 'Hellman'
    strategy: 
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: manifests
            displayName: 'Download Artifact: manifests'
          
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in yaml files'
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/manifests/'
              targetFiles: '*.yaml'
              tokenPrefix: '#('
              tokenSuffix: ')'

          - task: Kubernetes@1
            displayName: 'Apply k8s manifests'
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: 'Kubernetes-Developer-Automation-Deploy'
              namespace: 'developerautomation-xavgy'
              command: apply
              arguments: '-f $(Pipeline.Workspace)/manifests/'

              
