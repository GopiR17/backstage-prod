name: $(Build.BuildId)

trigger:
  branches:
    include:
    - master

pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  k8s-service-connection: 'Kubernetes-Hellman'
  kubernetes-namespace: 'backstage'

stages:
# Continuous Integration steps
- stage: CI
  displayName: 'Continuous Integration'  
  jobs:    
  - job: BuildSourceCode
    steps:
      - script: npm install yarn
      - script: yarn install
      - script: yarn tsc
      - script: yarn build
      
  - job: BuildBackendImage
    dependsOn: BuildSourceCode
    steps:
      - task: Docker@2
        displayName: 'Build backend image'
        inputs:
          command: 'build'
          Dockerfile: './packages/backend/Dockerfile'
          buildContext: $(System.DefaultWorkingDirectory)
          arguments: '-t backstage-backend'

      - task: ECRPushImage@1
        displayName: 'Push backend image to Shared ECR'
        inputs:
          awsCredentials: 'Shared-Prod ECR-Push'
          regionName: 'eu-central-1'
          imageSource: 'imagename'
          sourceImageName: 'backstage-backend'
          repositoryName: 'selfservice/backstage-backend'
          pushTag: '$(Build.BuildId)'

  - job: BuildFrontendImage
    dependsOn: BuildSourceCode
    steps:
      - task: Docker@2
        displayName: 'Build frontend image'
        inputs:
          command: 'build'
          Dockerfile: './contrib/docker/multi-stage-frontend/Dockerfile'
          buildContext: $(System.DefaultWorkingDirectory)
          arguments: '-t backstage'

      - task: ECRPushImage@1
        displayName: 'Push frontend image to Shared ECR'
        inputs:
          awsCredentials: 'Shared-Prod ECR-Push'
          regionName: 'eu-central-1'
          imageSource: 'imagename'
          sourceImageName: 'backstage'
          repositoryName: 'selfservice/backstage'
          pushTag: '$(Build.BuildId)'

  - job: PublishArtifacts
    dependsOn: BuildFrontendImage -and BuildBackendImage
    steps:
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/dfds-deploy/k8s'
          artifact: 'manifests'
          publishLocation: 'pipeline'   

# Continuous Deployment steps
- stage: CD
  displayName: 'Continuous Deployment'
  dependsOn: CI
    condition: and(succeeded('CI'), eq(variables['Build.SourceBranch'], 'refs/heads/main')) 

  jobs:  
  - deployment: K8s
    displayName: 'Deploy to Kubernetes'
    environment: 'Hellman'
    strategy: 
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: manifests
            displayName: 'Download Artifact: manifests'
          
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in yaml files'
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/manifests/'
              targetFiles: '*.yaml'
              tokenPrefix: '$('
              tokenSuffix: ')'
              
          - task: Kubernetes@1
            displayName: 'Apply manifests'
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: '$(k8s-service-connection)'
              namespace: '$(kubernetes-namespace)'
              command: apply
              arguments: '-f $(Pipeline.Workspace)/manifests/'