/*
 * Copyright 2023 The Backstage Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React, { PropsWithChildren, Fragment as SidebarSlice } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import PowerIcon from '@material-ui/icons/Power';
import {
  createExtension,
  coreExtensionData,
  createExtensionInput,
  useRouteRef,
  createNavItemExtension,
  createNavLogoExtension,
  createSchemaFromZod,
  iconsApiRef,
  useApi,
} from '@backstage/frontend-plugin-api';
import {
  Sidebar,
  useSidebarOpenState,
  Link,
  sidebarConfig,
  SidebarDivider,
  SidebarItem as SidebarBaseItem,
  SidebarGroup,
  SidebarSubmenu as SidebarMenu,
  SidebarSpace as SidebarSpacer,
} from '@backstage/core-components';
// eslint-disable-next-line @backstage/no-relative-monorepo-imports
import LogoIcon from '../../../app/src/components/Root/LogoIcon';
// eslint-disable-next-line @backstage/no-relative-monorepo-imports
import LogoFull from '../../../app/src/components/Root/LogoFull';
import { IconComponent } from '@backstage/core-plugin-api';

const useSidebarLogoStyles = makeStyles({
  root: {
    width: sidebarConfig.drawerWidthClosed,
    height: 3 * sidebarConfig.logoHeight,
    display: 'flex',
    flexFlow: 'row nowrap',
    alignItems: 'center',
    marginBottom: -14,
  },
  link: {
    width: sidebarConfig.drawerWidthClosed,
    marginLeft: 24,
  },
});

const SidebarLogo = (
  props: (typeof createNavLogoExtension.logoElementsDataRef)['T'],
) => {
  const classes = useSidebarLogoStyles();
  const { isOpen } = useSidebarOpenState();

  return (
    <div className={classes.root}>
      <Link to="/" underline="none" className={classes.link} aria-label="Home">
        {isOpen
          ? props?.logoFull ?? <LogoFull />
          : props?.logoIcon ?? <LogoIcon />}
      </Link>
    </div>
  );
};

function SidebarIcon(props: { id?: string | IconComponent }) {
  const { id = null } = props;
  const iconsApi = useApi(iconsApiRef);
  const Component = typeof id === 'string' ? iconsApi.getIcon(id) : id;
  return Component ? <Component /> : null;
}

type NavItemExtensionTarget =
  (typeof createNavItemExtension.targetDataRef)['T'];

function SidebarItem(
  props: PropsWithChildren<
    Omit<NavItemExtensionTarget, 'routeRef'> & {
      routeRef?: NavItemExtensionTarget['routeRef'];
    }
  >,
) {
  const { icon: Icon, title, routeRef, children } = props;
  const to = useRouteRef(routeRef)?.();
  // TODO: Support opening modal, for example, the search one
  return (
    <SidebarBaseItem to={to} icon={Icon} text={title}>
      {children}
    </SidebarBaseItem>
  );
}

type AppNavGroupConfig =
  | string
  | {
      title: string;
      icon: string;
      spacer: boolean;
      type?: 'drawer';
      items: (string | AppNavGroupConfig)[];
    };

export const AppNav = createExtension({
  namespace: 'app',
  name: 'nav',
  attachTo: { id: 'app/layout', input: 'nav' },
  configSchema: createSchemaFromZod(z => {
    // @ts-ignore
    const groupSchema = z.union([
      z.string(),
      z
        .object({
          title: z.string(),
          icon: z.string(),
          spacer: z.literal(true).optional(),
          type: z.literal('drawer').optional(),
        })
        .extend({
          items: z.lazy(() => z.array(z.string().or(groupSchema)).default([])),
        }),
    ]);

    return z.object({
      groups: z.array(groupSchema).default([]),
    });
  }),
  inputs: {
    items: createExtensionInput({
      target: createNavItemExtension.targetDataRef,
    }),
    logos: createExtensionInput(
      {
        elements: createNavLogoExtension.logoElementsDataRef,
      },
      {
        singleton: true,
        optional: true,
      },
    ),
  },
  output: {
    element: coreExtensionData.reactElement,
  },
  factory({ inputs, config }) {
    if (!config.groups.length) {
      return {
        element: (
          <Sidebar>
            <SidebarLogo {...inputs.logos?.output.elements} />
            {inputs.items.map(item => (
              <SidebarItem {...item.output.target} key={item.node.spec.id} />
            ))}
          </Sidebar>
        ),
      };
    }

    // Contains autogenerated items that were not grouped manually
    const pluginItems = inputs.items.reduce(
      (reducedInputs, input) => reducedInputs.set(input.node.spec.id, input),
      new Map<string, (typeof inputs.items)[0]>(),
    );

    type AppNavGroupObject = {
      title: string;
      icon: string | IconComponent;
      spacer?: boolean;
      type?: 'drawer';
      routeRef?: NavItemExtensionTarget['routeRef'];
      items: ({ input: (typeof inputs.items)[0] } | AppNavGroupObject)[];
    };

    const groups = config.groups.reduce<AppNavGroupObject[]>(
      function parseGroup(
        reducedGroups: AppNavGroupObject[],
        group: AppNavGroupConfig,
      ): AppNavGroupObject[] {
        if (typeof group === 'string') {
          const input = pluginItems.get(group);
          if (!input) return reducedGroups;
          pluginItems.delete(group);
          return [
            ...reducedGroups,
            {
              title: input.output.target.title,
              icon: input.output.target.icon,
              routeRef: input.output.target.routeRef,
              items: [{ input }],
            },
          ];
        }
        return [
          ...reducedGroups,
          {
            ...group,
            items: group.items.reduce<AppNavGroupObject['items']>(
              (
                reducedItems: AppNavGroupObject['items'],
                item: AppNavGroupConfig,
              ) => {
                if (typeof item === 'string') {
                  const input = pluginItems.get(item);
                  if (!input) return reducedItems;
                  pluginItems.delete(item);
                  return [...reducedItems, { input }];
                }
                return parseGroup(reducedGroups, item);
              },
              [],
            ),
          },
        ];
      },
      [],
    );

    if (pluginItems.size) {
      groups.push({
        type: 'drawer',
        title: 'Plugins',
        icon: PowerIcon,
        items: Array.from(pluginItems.values()).map(input => ({
          input,
        })),
      });
    }

    // TODO: Add support for pinner
    // TODO: Create a group for non-manually relocated items
    return {
      element: (
        <Sidebar>
          <SidebarLogo {...inputs.logos?.output.elements} />
          {groups.map(function renderGroup(group, groupIndex) {
            const { type, title, icon, routeRef, items, spacer } = group;
            const Icon = () => <SidebarIcon id={icon} />;

            const children = (
              <SidebarGroup icon={<Icon />} title={title} to={routeRef}>
                {items.map((item, itemIndex) =>
                  'input' in item ? (
                    <SidebarItem
                      {...item.input.output.target}
                      key={item.input.node.spec.id}
                    />
                  ) : (
                    renderGroup(item, itemIndex)
                  ),
                )}
              </SidebarGroup>
            );

            return (
              <SidebarSlice key={title}>
                {groupIndex > 0 ? <SidebarDivider /> : null}
                {type === 'drawer' ? (
                  <SidebarItem icon={Icon} title={title}>
                    <SidebarMenu title={title}>{children}</SidebarMenu>
                  </SidebarItem>
                ) : (
                  children
                )}
                {spacer && <SidebarSpacer />}
              </SidebarSlice>
            );
          })}
        </Sidebar>
      ),
    };
  },
});
