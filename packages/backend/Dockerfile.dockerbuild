# This dockerfile builds an image for the backend package.
# It should be executed with the root of the repo as docker context.
#
# Before building this image, be sure to have run the following commands in the repo root:
#
# yarn install
# yarn tsc
# yarn build
#
# Once the commands have been run, you can build the image using `yarn build-image`


FROM node:14-buster AS build
ARG app_config_file=app-config.yaml

RUN mkdir /app
COPY . /app
WORKDIR /app

RUN yarn install && yarn tsc
#RUN yarn workspace example-backend build --config ../../$app_config_file
RUN yarn workspace example-backend build --build-dependencies

RUN ls

FROM node:14-buster-slim
ARG app_config_file=app-config.yaml

RUN echo "app_config_file: $app_config_file"
WORKDIR /app

RUN apt-get update && apt-get install -y curl
RUN mkdir ca && curl https://s3.amazonaws.com/rds-downloads/rds-ca-2019-root.pem > ca/rds-ca-2019-root.pem

# # Copy repo skeleton first, to avoid unnecessary docker cache invalidation.
# # The skeleton contains the package.json of each package in the monorepo,
# # and along with yarn.lock and the root package.json, that's enough to run yarn install.

COPY --from=build /app/yarn.lock /app/package.json /app/packages/backend/dist/skeleton.tar.gz ./

# COPY yarn.lock package.json packages/backend/dist/skeleton.tar.gz ./
RUN tar xzf skeleton.tar.gz && rm skeleton.tar.gz

RUN yarn install --frozen-lockfile --production --network-timeout 300000 && rm -rf "$(yarn cache dir)"

# Then copy the rest of the backend bundle, along with any other files we might want.
COPY packages/backend/dist/bundle.tar.gz $app_config_file ./ 
RUN mv $app_config_file app-config-current.yaml
RUN tar xzf bundle.tar.gz && rm bundle.tar.gz

CMD ["node", "packages/backend", "--config", "app-config-current.yaml"]
