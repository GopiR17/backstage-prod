/*
 * Copyright 2020 Spotify AB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  AnyApiFactory,
  configApiRef,
  createApiFactory,
  errorApiRef,
  githubAuthApiRef,
} from '@backstage/core';
import {
  ScmIntegrationsApi,
  scmIntegrationsApiRef,
} from '@backstage/integration-react';
import { costInsightsApiRef } from '@backstage/plugin-cost-insights';
import {
  graphQlBrowseApiRef,
  GraphQLEndpoints,
} from '@backstage/plugin-graphiql';
import {
  techRadarApiRef,
  TechRadarApi,
  TechRadarLoaderResponse,
} from '@backstage/plugin-tech-radar';

import DfdsCostInsightsClient from './costInsights';

class MyOwnClient implements TechRadarApi {
  async load(): Promise<TechRadarLoaderResponse> {
    // if needed id prop can be used to fetch the correct data

    const data = await {
      quadrants: [
        { name: 'Languages', id: '0' },
        { name: 'Infrastructure', id: '1' },
        { name: 'Frameworks', id: '2' },
        { name: 'Data Management', id: '3' },
      ],
      rings: [
        { name: 'ADOPT', color: '#93c47d', id: '0' },
        { name: 'TRIAL', color: '#93d2c2', id: '1' },
        { name: 'ASSESS', color: '#fbdb84', id: '2' },
        { name: 'HOLD', color: '#efafa9', id: '3' },
      ],
      entries: [
        {
          key: 'AWS Data Pipeline',
          id: 'AWS Data Pipeline',
          quadrant: '3',
          title: 'AWS Data Pipeline',
          url:
            'https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/what-is-datapipeline.html',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'Flink',
          id: 'Flink',
          quadrant: '3',
          title: 'Flink',
          url: 'https://flink.apache.org/',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'Presto',
          id: 'Presto',
          quadrant: '3',
          title: 'Presto',
          url: 'https://prestodb.io/',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'AWS S3',
          id: 'AWS S3',
          quadrant: '3',
          title: 'AWS S3',
          url: 'https://aws.amazon.com/aws/s3',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Elasticsearch',
          id: 'Elasticsearch',
          quadrant: '3',
          title: 'Elasticsearch',
          url: 'https://www.elastic.co/',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'AWS Elasticsearch',
          id: 'AWS Elasticsearch',
          quadrant: '3',
          title: 'AWS Elasticsearch',
          url: 'https://aws.amazon.com/elasticsearch-service/',
          timeline: [{ ringId: '3', moved: 1, date: new Date() }],
        },
        {
          key: 'AWS MSK',
          id: 'AWS MSK',
          quadrant: '3',
          title: 'AWS MSK',
          url: 'https://aws.amazon.com/msk/',
          timeline: [{ ringId: '3', moved: 1, date: new Date() }],
        },
        {
          key: 'PostgreSQL',
          id: 'PostgreSQL',
          quadrant: '3',
          title: 'PostgreSQL',
          url: 'https://www.postgresql.org/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Redis',
          id: 'Redis',
          quadrant: '3',
          title: 'Redis',
          url: 'https://redis.io/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'AWS DynamoDB',
          id: 'AWS DynamoDB',
          quadrant: '3',
          title: 'AWS DynamoDB',
          url: 'https://aws.amazon.com/dynamodb',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'Node.js',
          id: 'Node.js',
          quadrant: '2',
          title: 'Node.js',
          url: 'https://nodejs.org/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: '.NET 6',
          id: '.NET 6',
          quadrant: '2',
          title: '.NET 6',
          url: 'https://dotnet.microsoft.com/download/dotnet/6.0',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'Next.js',
          id: 'Next.js',
          quadrant: '2',
          title: 'Next.js',
          url: 'https://nextjs.org/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'Cylon.js',
          id: 'Cylon.js',
          quadrant: '2',
          title: 'Cylon.js',
          url: 'https://cylonjs.com/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'Lit',
          id: 'Lit',
          quadrant: '2',
          title: 'Lit',
          url: 'https://lit.dev/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'Blazor',
          id: 'Blazor',
          quadrant: '2',
          title: 'Blazor',
          url: 'https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'Flutter',
          id: 'Flutter',
          quadrant: '2',
          title: 'Flutter',
          url: 'https://flutter.dev/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: '.NET Standard',
          id: '.NET Standard',
          quadrant: '2',
          title: '.NET Standard',
          url: 'https://dotnet.microsoft.com/platform/dotnet-standard',
          timeline: [{ ringId: '3', moved: 0, date: new Date() }],
        },
        {
          key: '.NET Core 3',
          id: '.NET Core 3',
          quadrant: '2',
          title: '.NET Core 3',
          url: 'https://engineering.DFDS.com/tags/nodejs.html',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Serilog',
          id: 'Serilog',
          quadrant: '2',
          title: 'Serilog',
          url: 'https://serilog.net/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'ReactJS',
          id: 'ReactJS',
          quadrant: '2',
          title: 'ReactJS',
          url: 'https://reactjs.org/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Angular',
          id: 'Angular',
          quadrant: '2',
          title: 'Angular',
          url: 'https://angularjs.org/',
          timeline: [{ ringId: '3', moved: 0, date: new Date() }],
        },
        {
          key: 'Camunda',
          id: 'Camunda',
          quadrant: '2',
          title: 'Camunda',
          url: 'https://camunda.com/',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'TensorFlow',
          id: 'TensorFlow',
          quadrant: '2',
          title: 'TensorFlow',
          url: 'https://www.tensorflow.org/',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'EF Core',
          id: 'EF Core',
          quadrant: '2',
          title: 'EF Core',
          url: 'https://docs.microsoft.com/en-us/ef/core/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Vue.js',
          id: 'Vue.js',
          quadrant: '2',
          title: 'Vue.js',
          url: 'https://vuejs.org/',
          timeline: [{ ringId: '3', moved: 0, date: new Date() }],
        },
        {
          key: 'Docker Desktop',
          id: 'Docker Desktop',
          quadrant: '1',
          title: 'Docker Desktop',
          url: 'https://www.docker.com/products/docker-desktop',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Podman',
          id: 'Podman',
          quadrant: '1',
          title: 'Podman',
          url: 'https://podman.io/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'External Identities',
          id: 'External Identities',
          quadrant: '1',
          title: 'External Identities',
          url:
            'https://docs.microsoft.com/en-us/azure/active-directory/external-identities/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Kubernetes',
          id: 'Kubernetes',
          quadrant: '1',
          title: 'Kubernetes',
          url: 'https://kubernetes.io/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Nginx',
          id: 'Nginx',
          quadrant: '1',
          title: 'Nginx',
          url: 'https://www.nginx.com/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Crossplane',
          id: 'Crossplane',
          quadrant: '1',
          title: 'Crossplane',
          url: 'https://crossplane.io/',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'Docker Compose',
          id: 'Docker Compose',
          quadrant: '1',
          title: 'Docker Compose',
          url: 'https://docs.docker.com/compose/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Terraform',
          id: 'Terraform',
          quadrant: '1',
          title: 'Terraform',
          url: 'https://www.terraform.io/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Prometheus',
          id: 'Prometheus',
          quadrant: '1',
          title: 'Prometheus',
          url: 'https://prometheus.io/',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'Grafana',
          id: 'Grafana',
          quadrant: '1',
          title: 'Grafana',
          url: 'https://grafana.com/',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'SNYK',
          id: 'SNYK',
          quadrant: '1',
          title: 'SNYK',
          url: 'https://snyk.io/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'OpenTelemetry',
          id: 'OpenTelemetry',
          quadrant: '1',
          title: 'OpenTelemetry',
          url: 'https://opentelemetry.io/',
          timeline: [{ ringId: '1', moved: 1, date: new Date() }],
        },
        {
          key: 'AWS Lambda',
          id: 'AWS Lambda',
          quadrant: '1',
          title: 'AWS Lambda',
          url: 'https://aws.amazon.com/lambda/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'GitOps',
          id: 'GitOps',
          quadrant: '1',
          title: 'GitOps',
          url: 'https://about.gitlab.com/topics/gitops/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'Windows Server',
          id: 'Windows Server',
          quadrant: '1',
          title: 'Windows Server',
          timeline: [{ ringId: '3', moved: 0, date: new Date() }],
        },
        {
          key: 'Go',
          id: 'Go',
          quadrant: '0',
          title: 'Go',
          url: 'https://golang.org/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Java',
          id: 'Java',
          quadrant: '0',
          title: 'Java',
          url: 'https://www.java.com/en/',
          timeline: [{ ringId: '3', moved: 0, date: new Date() }],
        },
        {
          key: 'JavaScript',
          id: 'JavaScript',
          quadrant: '0',
          title: 'JavaScript',
          url: 'https://www.javascript.com/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'OpenAPI 3',
          id: 'OpenAPI 3',
          quadrant: '0',
          title: 'OpenAPI 3',
          url: 'https://swagger.io/specification/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'C#',
          id: 'C#',
          quadrant: '0',
          title: 'C#',
          url: 'https://docs.microsoft.com/en-us/dotnet/csharp/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'AsyncAPI',
          id: 'AsyncAPI',
          quadrant: '0',
          title: 'AsyncAPI',
          url: 'https://www.asyncapi.com/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Python',
          id: 'Python',
          quadrant: '0',
          title: 'Python',
          url: 'https://www.python.org/',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'Swift',
          id: 'Swift',
          quadrant: '0',
          title: 'Swift',
          url: 'https://swift.org/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Clojure',
          id: 'Clojure',
          quadrant: '0',
          title: 'Clojure',
          url: 'https://clojure.org/',
          timeline: [{ ringId: '3', moved: -1, date: new Date() }],
        },
        {
          key: 'WebAssembly',
          id: 'WebAssembly',
          quadrant: '0',
          title: 'WebAssembly',
          url: 'https://webassembly.org/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'ewasm',
          id: 'ewasm',
          quadrant: '0',
          title: 'ewasm',
          url: 'https://ewasm.readthedocs.io/en/mkdocs/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'GraphQL',
          id: 'GraphQL',
          quadrant: '0',
          title: 'GraphQL',
          url: 'https://graphql.org/',
          timeline: [{ ringId: '1', moved: 1, date: new Date() }],
        },
        {
          key: 'F#',
          id: 'F#',
          quadrant: '0',
          title: 'F#',
          url: 'https://fsharp.org/',
          timeline: [{ ringId: '2', moved: 1, date: new Date() }],
        },
        {
          key: 'Kotlin',
          id: 'Kotlin',
          quadrant: '0',
          title: 'Kotlin',
          url: 'https://kotlinlang.org/',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'Powershell Core',
          id: 'Powershell Core',
          quadrant: '0',
          title: 'Powershell Core',
          url: 'https://github.com/PowerShell/PowerShell',
          timeline: [{ ringId: '1', moved: 0, date: new Date() }],
        },
        {
          key: 'TypeScript',
          id: 'TypeScript',
          quadrant: '0',
          title: 'TypeScript',
          url: 'https://www.typescriptlang.org/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'R',
          id: 'R',
          quadrant: '0',
          title: 'R',
          url: 'https://www.r-project.org/about.html',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'Rust',
          id: 'Rust',
          quadrant: '0',
          title: 'Rust',
          url: 'https://www.rust-lang.org/',
          timeline: [{ ringId: '3', moved: -1, date: new Date() }],
        },
        {
          key: 'AWS SQS/SNS',
          id: 'AWS SQS/SNS',
          quadrant: '3',
          title: 'AWS SQS/SNS',
          url: 'https://aws.amazon.com/sqs/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'Kafka',
          id: 'Kafka',
          quadrant: '3',
          title: 'Kafka',
          url: 'https://kafka.apache.org/',
          timeline: [{ ringId: '0', moved: 0, date: new Date() }],
        },
        {
          key: 'AWS Kinesis',
          id: 'AWS Kinesis',
          quadrant: '3',
          title: 'AWS Kinesis',
          url: 'https://aws.amazon.com/kinesis/',
          timeline: [{ ringId: '3', moved: 0, date: new Date() }],
        },
        {
          key: 'Protobuf',
          id: 'Protobuf',
          quadrant: '3',
          title: 'Protobuf',
          url: 'https://developers.google.com/protocol-buffers',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'Azure Event Hubs',
          id: 'Azure Event Hubs',
          quadrant: '3',
          title: 'Azure Event Hubs',
          url: 'https://azure.microsoft.com/en-us/services/event-hubs/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'Azure Event Grid',
          id: 'Azure Event Grid',
          quadrant: '3',
          title: 'Azure Event Grid',
          url: 'https://docs.microsoft.com/en-us/azure/event-grid/overview',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'IOTA',
          id: 'IOTA',
          quadrant: '3',
          title: 'IOTA',
          url: 'https://www.iota.org/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'Cardano',
          id: 'Cardano',
          quadrant: '3',
          title: 'Cardano',
          url: 'https://cardano.org/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'Ethereum',
          id: 'Ethereum',
          quadrant: '3',
          title: 'Ethereum',
          url: 'https://ethereum.org/en/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
        {
          key: 'ActiveMQ',
          id: 'ActiveMQ',
          quadrant: '3',
          title: 'ActiveMQ',
          url: 'http://activemq.apache.org/',
          timeline: [{ ringId: '3', moved: 0, date: new Date() }],
        },
        {
          key: 'RabbitMQ',
          id: 'RabbitMQ',
          quadrant: '3',
          title: 'RabbitMQ',
          url: 'https://www.rabbitmq.com/',
          timeline: [{ ringId: '3', moved: 0, date: new Date() }],
        },
        {
          key: 'MQTT',
          id: 'MQTT',
          quadrant: '3',
          title: 'MQTT',
          url: 'https://mqtt.org/',
          timeline: [{ ringId: '2', moved: 0, date: new Date() }],
        },
      ],
    };

    // maybe you'll need to do some data transformation here to make it look like TechRadarLoaderResponse

    return data;
  }
}

export const apis: AnyApiFactory[] = [
  createApiFactory({
    api: scmIntegrationsApiRef,
    deps: { configApi: configApiRef },
    factory: ({ configApi }) => ScmIntegrationsApi.fromConfig(configApi),
  }),

  createApiFactory(techRadarApiRef, new MyOwnClient()),

  createApiFactory({
    api: graphQlBrowseApiRef,
    deps: { errorApi: errorApiRef, githubAuthApi: githubAuthApiRef },
    factory: ({ errorApi, githubAuthApi }) =>
      GraphQLEndpoints.from([
        GraphQLEndpoints.create({
          id: 'gitlab',
          title: 'GitLab',
          url: 'https://gitlab.com/api/graphql',
        }),
        GraphQLEndpoints.github({
          id: 'github',
          title: 'GitHub',
          errorApi,
          githubAuthApi,
        }),
      ]),
  }),

  createApiFactory({
    api: costInsightsApiRef,
    deps: {},
    factory: () => new DfdsCostInsightsClient(),
  }),
];
